<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on 烂杯的博客</title>
    <link>https://cgcel.github.io/tags/android/</link>
    <description>Recent content in android on 烂杯的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cgcel.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一加8T全量包升级并保留ROOT</title>
      <link>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A08t%E5%85%A8%E9%87%8F%E5%8C%85%E5%8D%87%E7%BA%A7%E5%B9%B6%E4%BF%9D%E7%95%99root/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A08t%E5%85%A8%E9%87%8F%E5%8C%85%E5%8D%87%E7%BA%A7%E5%B9%B6%E4%BF%9D%E7%95%99root/</guid>
      <description>前言 在试用了一天多 ColorOS 之后, 鉴于其后台管理过于严格, 我又趁午休时间刷回了 OOS, 之前已经有了用 TWRP 保留 root 的全量包更新经验和文章, 本篇只想快速记录一下.
准备工作  9008 线刷包 (OOS) payload_dumper Magisk-v23.0.apk  步骤 步骤一: 刷回 OOS  进入 开发者选项, 勾选 允许 OEM 解锁, 开启 USB 调试, 然后关机静置. 同时按住 音量+ 和 音量-, 然后用 USB 线连接电脑, 开启 9008 线刷, 刷机完毕后重启进入系统.  步骤二: 解锁 OOS 并 ROOT   进入 开发者选项, 勾选 允许 OEM 解锁, 开启 USB 调试, 然后输入以下指令:
adb devices adb reboot bootloader fastboot devices fastboot oem unlock 使用 &amp;ldquo;音量键&amp;rdquo; 和 &amp;ldquo;电源键&amp;rdquo; 确定解锁手机, 然后完成初始化进入系统.</description>
    </item>
    
    <item>
      <title>从OOS到LOS -- 一加8T的刷机记录</title>
      <link>https://cgcel.github.io/p/%E4%BB%8Eoos%E5%88%B0los-%E4%B8%80%E5%8A%A08t%E7%9A%84%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 17 May 2021 13:45:02 +0800</pubDate>
      
      <guid>https://cgcel.github.io/p/%E4%BB%8Eoos%E5%88%B0los-%E4%B8%80%E5%8A%A08t%E7%9A%84%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/</guid>
      <description>前言 距离一加 8T 的发布已经过去了大半年, 据说一加 8T 的 ColorOS 会在6月底释出, 大家都说大氢亡了🥴, 但是我不用氢啊🤡, 加上氧最近也用的有些腻了, 正好前一段时间关注到 8T 的 xda 论坛 挺活跃的, 已经有不少的 ROM 可以刷了:
oneplus 8t xda forum
于是我就打算利用空闲时间刷一刷手里的 8T 解解馋, 玩累了正好回 ColorOS (如果一加不鸽的话&amp;hellip;)
本篇将分为两大部分来记录, 分别是:
 OOS 刷 LOS 的记录 LOS 刷回 OOS 并 root 的记录  OOS 刷 LOS 准备 在准备刷机前, 我们需要 备份好数据, 并安装或下载好以下内容 (下载包以本篇博客日期为准, 如参考则需尽量下载最新包):
 adb (基本操作了, 没有adb就无法通过指令控制手机) 9008救砖包 (随时准备好救砖) lineage-18.1-20210513-nightly-kebab-signed.zip lineage-18.1-20210513-recovery-kebab.img copy-partitions-20210323_1922.zip GAPPS Magisk-v23.0.apk  具体步骤 详细刷机步骤参考 官方文档 , 下面我将按照具体指令来总结, 这样比较明了, 不用看详细的文字解释:</description>
    </item>
    
    <item>
      <title>Syberia OS (R) for OnePlus 6 刷机体验</title>
      <link>https://cgcel.github.io/p/syberia-os-r-for-oneplus-6-%E5%88%B7%E6%9C%BA%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sat, 03 Oct 2020 19:38:47 +0800</pubDate>
      
      <guid>https://cgcel.github.io/p/syberia-os-r-for-oneplus-6-%E5%88%B7%E6%9C%BA%E4%BD%93%E9%AA%8C/</guid>
      <description>前言 Android 11 正式版发布已经有一段时间, 前不久在 tg channel 上看到一加6即将适配Android 11 的消息:

昨晚无聊刷一刷 xda, 发现一加6已经有第三方的A11包可以刷, 正好用晚上的时间试一试.
准备 因为作者介绍此 ROM 时用红字表明要从Syberia OS Android 10 升级, 所以我先刷Syberia OS Android 10 后再升级 Android 11 版. (后来在文章下留言询问得知当作一个新 ROM 来刷也是 OK 的)

下载清单 Android 10 部分  SyberiaOS ROM Downloads OOS 10.3.1 Downloads OpenGapps Downloads Latest TWRP Downloads  xda 链接
Android 11 部分  SyberiaOS ROM Download Flame Gapps Download (recommended)  xda 链接</description>
    </item>
    
    <item>
      <title>一加7 OTA升级系统并保留root记录</title>
      <link>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A07-ota%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%B9%B6%E4%BF%9D%E7%95%99root%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 07 May 2020 15:02:04 +0800</pubDate>
      
      <guid>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A07-ota%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%B9%B6%E4%BF%9D%E7%95%99root%E8%AE%B0%E5%BD%95/</guid>
      <description>写在前面 手上的一加7已经 root 了一个多月, 一加的更新迟迟不来, 安全补丁还停留在3月份的, 终于在今天 Oxygen Updater 推送了 OB13 更新, 于是我赶紧下下来, 尝试一下保留 root 状态的 OTA 升级.
操作步骤 网上冲浪一下就可以找到很多教程, 不过多数是英文的, 因为一加在国内还不够主流. 总结一下基本步骤如下:
 下载全量包, 进入系统更新 - 选择本地安装, 安装完毕后不要重启 在 magisk manager 中安装 TWRP A/B Retention Script 打开 magisk manager, 卸载 - 还原原厂镜像, 卸载成功后不要重启 在 magisk manager 中, 点击安装 - 安装到未使用的槽位(OTA后) - 点击重启  注意重启后手机 (可能) 会重启两次, 不用进行其他操作, 等待其重启完成即可.
具体操作 为了记录得详细一点, 我截了一些图, 下面将按照步骤贴出.
1.下载/安装全量包 在 Oxygen Updater 中下载全量包.</description>
    </item>
    
    <item>
      <title>ViewPager的嵌套滑动冲突问题解决</title>
      <link>https://cgcel.github.io/p/viewpager%E7%9A%84%E5%B5%8C%E5%A5%97%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 10 Feb 2020 16:01:35 +0800</pubDate>
      
      <guid>https://cgcel.github.io/p/viewpager%E7%9A%84%E5%B5%8C%E5%A5%97%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid>
      <description>在上一篇博客 ViewPager禁用滑动实践和总结 中我总结了禁用 ViewPager 滑动的解决方案, 这也是网上示例的主流解决方法, 但是使用这个方法后, 导致项目中 Fragment 的 RecyclerView 与 ViewPager 的滑动出现冲突, 无法实现效果, 如下图:

从上图可以看到按照上一篇博客中重写子 Fragment 中的 ViewPager 的 OnInterceptTouchEvent() 和 onTouchEvent() 后, 于子 Fragment 中显示的 RecyclerView 上滑动将无法使用 Activity 的 ViewPager 切换, 只能在 RecyclerView 没有覆盖到的边框位置进行滑动, 这样的操作无疑非常不舒适, 于是我只能继续在网上搜索相关解决方案, 现总结如下.
修改步骤 与上一篇博客思路一样, 只需要重写 ViewPager 的 canScrollHorizontally() 函数即可, 代码如下:
public class UnScrollableViewPager extends ViewPager { private boolean scrollable = false; public UnScrollableViewPager(Context context) { super(context); } public UnScrollableViewPager(Context context, AttributeSet attrs) { super(context, attrs); } @Override // 重写该函数, 用于判断是否能水平滑动  public boolean canScrollHorizontally(int direction) { return scrollable; // false表示已经到最右  } } 修改完代码后重新运行, 效果如下, 可见已经实现了预期的效果.</description>
    </item>
    
    <item>
      <title>ViewPager禁用滑动实践和总结</title>
      <link>https://cgcel.github.io/p/viewpager%E7%A6%81%E7%94%A8%E6%BB%91%E5%8A%A8%E5%AE%9E%E8%B7%B5%E5%92%8C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 08 Feb 2020 22:00:39 +0800</pubDate>
      
      <guid>https://cgcel.github.io/p/viewpager%E7%A6%81%E7%94%A8%E6%BB%91%E5%8A%A8%E5%AE%9E%E8%B7%B5%E5%92%8C%E6%80%BB%E7%BB%93/</guid>
      <description>开篇 接触 Android 有一段时间了, 起因是帮同事一起做项目, 顺便自己学习, 于是项目一直断断续续进行, 很多控件和功能都是参考《第一行代码》还有网上的例子慢慢探索的, 最近一直在钻 TabLayout 的点击切换, 也就是禁用 ViewPager 的左右滑动切换的牛角尖, 具体效果如下图所示. 网上的例子实在是太千篇一律了, 导致有些地方只要其中一篇阅读量很多的博客没有, 其他转载或者借鉴的博客就都不会写🤪, 下面就记录一下我在原有 TabLayout&amp;amp;ViewPager 基础上修改的示例.

实现步骤 1. 重写ViewPager 如果要实现禁用滑动的效果, 那么就需要重写 ViewPager, 因为默认是开启滑动的, 具体代码如下:
public class NoScrollingViewPager extends ViewPager { private boolean scrollable = false; public NoScrollingViewPager(Context context) { super(context); } public NoScrollingViewPager(Context context, AttributeSet attrs) { super(context, attrs); } @Override // 重写以下两个TouchEvent, 返回false以禁用滑动动作的监听  public boolean onInterceptTouchEvent(MotionEvent ev) { return scrollable; } @Override public boolean onTouchEvent(MotionEvent ev) { return scrollable; } } 以上重写代码都是千篇一律的, 只需要重写两个函数.</description>
    </item>
    
    <item>
      <title>一加6 Pixel Experience Android Pie 刷机体验</title>
      <link>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A06-pixel-experience-android-pie-%E5%88%B7%E6%9C%BA%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A06-pixel-experience-android-pie-%E5%88%B7%E6%9C%BA%E4%BD%93%E9%AA%8C/</guid>
      <description>开篇 前不久入了一加6, 入手第二天就升到了官方的 OxygenOS 9.0 Beta4, 吃到了官方的 pie, 体验下来, 总体感觉如下:
优点:  指纹支付很方便, 这在氢氧两个 ROM 均有适配 类原生 UI 风格讨喜 后台清除方式分两种模式可调节, 方便不同用户群体 全面屏显示功能调节方便, 充分利用屏幕显示 Dash 闪充充电效率很高  缺点:  系统功能未完善, 比如岛 Island (炼妖壶)等相关 app 无法创建工作模式 动画粗糙, 比如切换最近任务栏时可以明显看见缩略图由原生的棱角突变为一加的圆角卡片 后台限制管理太分散: 一加将自家的后台省电与原生的 AI 省电混合使用, 用户难以分清楚两者相关作用 室内定位体验差, 一加的定位一直以来都受到诟病 (比如 ingress 室内一直在雪花)  总体来说一加的产品在国内算是非常不错的安卓旗舰机了, 今天无聊打开 xda 逛了一下一加6论坛, 发现 Pixel Experience 适配了一加6, 于是在一番准备后, 我开始了刷机.
前期准备 这是我第三次刷 AB 分区的手机, 上一次操作是用米3和Pixel 2 XL的时候, 因此要做足准备, 不然刷成砖岂不是&amp;hellip;😂
  查询相关评测
  这一步其实是必不可少的, 任何 ROM 都会有或多或少的 bug, 要确认该 ROM 在本机上能正常使用我们才能放心去刷, 另外我习惯找比较出名的第三方 ROM, 一是有口碑有质量保证, 二是刷的人多可以借鉴他们的方法和经验, 而 Pixel Experience 是近来大家讨论比较多的 ROM.</description>
    </item>
    
    <item>
      <title>Pixel 2XL root方案记录</title>
      <link>https://cgcel.github.io/p/pixel-2xl-root%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/p/pixel-2xl-root%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/</guid>
      <description>开篇 回顾我的刷机历程, 每次都是有了想法之后就行动起来了, 经历的是一次又一次的真香警告. 而本次 root 的想法的起因是黑域越来越难用, 让我想用回绿守, 本想着等 9.1 出来之后再 root, 但是每次我都会等不及&amp;hellip; 然后果不其然的踩坑了.
刷机环境以及刷机包准备  USB驱动 adb环境 TWRP Magisk  其中, twrp 较新版本刷入之后有 bug, 上 youtube 看过教程后, 决定采用 twrp3.2.1.2, 下载时需要下载.img以及.zip文件.
具体步骤   进入命令行
  进入 fastboot 界面
$ adb reboot bootloader  解 bootloader 锁
$ fastboot flashing unlock使用音量键和电源键进行确认, 注意解锁后手机所有数据将会被清除, 要做好备份.
  刷入第三方 recovery
$ fastboot boot path/twrp.img刷入成功后, 重启进入 recovery, 此时还需要进入 install, 选择 twrp.</description>
    </item>
    
    <item>
      <title>Gcm-for-Mojo搭建总结</title>
      <link>https://cgcel.github.io/p/gcm-for-mojo%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/p/gcm-for-mojo%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</guid>
      <description>开篇 最近一直对手机的 3.1GB/3.8GB 的内存占用感到不爽, 想要压缩到 2.8GB 左右, 于是开始填坑 gcm-for-mojo , 这是一个获取网页端微信信息并通过 gcm 推送到客户端的 app, 同时他也支持 mipush, hwpush 等等国内平台的推送, 由于手机是 Pixel 2 XL, 原生系统自然用 gcm 就 ok 了, 微信客户端现在内存占用是越来越大了, 把后台关了也有接近300M, 而使用一些工具替代微信的后台接收信息工作, 自然就达到了省电省内存的效果了.
服务器配置 本人常用微信, 于是就只做了微信的推送, QQ 配置方法类似, 基本上举一反三, 很容易学会. 首先我们在服务器上安装 perl, Ubuntu 16.04 操作如下:
$ sudo apt-get install perl cpanminus git make screen libssl-dev libnet-ssleay-perl libio-socket-ssl-perl完成后
$ cpanm Mojo::Weixin我们直接到 GitHub 上看配置步骤, 描述得很详细, 最多几分钟就可以搞定了.
接下来我们新建一个 wx.pl 文件, 命名随意, 内容如下:
use Mojo::Weixin; my $client = Mojo::Weixin-&amp;gt;new(log_encoding=&amp;gt;&amp;#34;utf-8&amp;#34;); $client-&amp;gt;load(&amp;#34;ShowMsg&amp;#34;); $client-&amp;gt;load(&amp;#34;GCM&amp;#34;,data=&amp;gt;{ api_url =&amp;gt; &amp;#39;https://gcm-http.</description>
    </item>
    
    <item>
      <title>一加1卡刷lineage15.1</title>
      <link>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A01%E5%8D%A1%E5%88%B7lineage15.1/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/p/%E4%B8%80%E5%8A%A01%E5%8D%A1%E5%88%B7lineage15.1/</guid>
      <description>开篇 终于结束了好几门考试, 有时间更新一下博客了, 就记录一下几天前给一加1卡刷 lineage15.1 吧.
突如其来的更新 之前有一段时间一直在等官方更新一加1的 lineage15.1, 有空就刷新一下官网, 但始终没有发布, 于是就先把 lineage14.1 刷了. 直到几天前检测更新, 发现有无法 ota 更新的更新, 仔细一看原来是 lineage15.1, 而且已经更新了两版, 于是我迫不及待下载了安装包.
踩坑 备份后进入 twrp 四清手机, 然后开始卡刷, 然而报错了:
This package is for &amp;quot;OnePlus&amp;quot; devices: this is a &amp;quot;A0001&amp;quot;
经查询, 发现是 twrp 版本太低了, 换了最新的 twrp 一试, 果然成功了, 随后就是刷 gapps, magisk, 常规操作就不说了.
开机 开机初始化后进入系统, 还是和以往版本一样流畅, 附上一些截图, 短暂使用后只发现了一个奇怪的bug: 刺激战场开伞后就闪退, 进游戏无法返回正在进行的游戏&amp;hellip;下面附上一些截图:图1 图2 图3
升级 今天系统迎来了一次更新, 只有300M左右, 于是就直接用流量下载了, 重启后发现保留了 root 效果, 之前 14.</description>
    </item>
    
  </channel>
</rss>
