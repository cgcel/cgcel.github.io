<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on 烂杯的博客</title>
    <link>https://cgcel.github.io/tags/python/</link>
    <description>Recent content in python on 烂杯的博客</description>
    <image>
      <url>https://cgcel.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://cgcel.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 17 May 2022 14:13:36 +0000</lastBuildDate><atom:link href="https://cgcel.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scrapy初上手: 爬取小说记录</title>
      <link>https://cgcel.github.io/posts/2022/05/17/2022-05-17-title/</link>
      <pubDate>Tue, 17 May 2022 14:13:36 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2022/05/17/2022-05-17-title/</guid>
      <description>开篇 由于最近因为疫情居家健康监测, 还没复工, 我在家边学习边玩. 在家期间看了 ⌈86⌋ 第二季, 简单学了一下 Go, 还有捡回来 Scrapy 学习一下. 说到 Scrapy, 本科的时候就有学习过, 但是当时找的是B站上的中文教程, 感觉教的我一头雾水, 这次从官方文档开始下手, 结合 Google, 感觉一下子清晰明了了许多.
准备 安装 现在的 Scrapy 安装简单了不少, 几年前在 Windows 端还不能直接用用 pip 安装. 现在只需要一句 pip install scrapy 即可.
编译环境 编译环境当然还是永远的 VS Code.
实现 计划 大佬提供了一个塞满 URL 的 json 文件给我, 都是小说网站相关的, 既然要爬取小说网站, 就不可避免地要爬取同一本书的多个章节, 于是很容易联想到使用 Scrapy 来实现, 毕竟是一个成名已久的 Python 爬虫框架, 总比我简单粗暴用 requests 来爬好多了.
那么接下来就是解决以下几个问题, 最后实现整个爬取的功能:
 根据小说主页 URL 获取各章节标题以及 URL 根据章节 URL 爬取章节内容并保存 将 Scrapy 爬取到的内容按顺序排列后, 依次存入 .</description>
    </item>
    
    <item>
      <title>我的 ZeroTier Network 管理 bot</title>
      <link>https://cgcel.github.io/posts/2021/05/13/2021-05-13-%E6%88%91%E7%9A%84-zerotier-network-%E7%AE%A1%E7%90%86-bot/</link>
      <pubDate>Thu, 13 May 2021 21:51:24 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2021/05/13/2021-05-13-%E6%88%91%E7%9A%84-zerotier-network-%E7%AE%A1%E7%90%86-bot/</guid>
      <description>一个用于管理 ZeroTier 网络的 Telegram Bot</description>
    </item>
    
    <item>
      <title>爬取洪灾期间长江沿岸水位并绘图</title>
      <link>https://cgcel.github.io/posts/2020/07/18/2020-07-18-%E7%88%AC%E5%8F%96%E6%B4%AA%E7%81%BE%E6%9C%9F%E9%97%B4%E9%95%BF%E6%B1%9F%E6%B2%BF%E5%B2%B8%E6%B0%B4%E4%BD%8D%E5%B9%B6%E7%BB%98%E5%9B%BE/</link>
      <pubDate>Sat, 18 Jul 2020 15:28:01 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/07/18/2020-07-18-%E7%88%AC%E5%8F%96%E6%B4%AA%E7%81%BE%E6%9C%9F%E9%97%B4%E9%95%BF%E6%B1%9F%E6%B2%BF%E5%B2%B8%E6%B0%B4%E4%BD%8D%E5%B9%B6%E7%BB%98%E5%9B%BE/</guid>
      <description>偶然发起的小项目</description>
    </item>
    
    <item>
      <title>最近开的一个爬虫小坑</title>
      <link>https://cgcel.github.io/posts/2020/07/06/2020-07-06-%E6%9C%80%E8%BF%91%E5%BC%80%E7%9A%84%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%E5%B0%8F%E5%9D%91/</link>
      <pubDate>Mon, 06 Jul 2020 21:43:54 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/07/06/2020-07-06-%E6%9C%80%E8%BF%91%E5%BC%80%E7%9A%84%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB%E5%B0%8F%E5%9D%91/</guid>
      <description>第一次全程使用selenium爬数据</description>
    </item>
    
    <item>
      <title>六维空间自动登录脚本</title>
      <link>https://cgcel.github.io/posts/2018/06/23/2018-06-23-%E5%85%AD%E7%BB%B4%E7%A9%BA%E9%97%B4%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/06/23/2018-06-23-%E5%85%AD%E7%BB%B4%E7%A9%BA%E9%97%B4%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC/</guid>
      <description>每天登录一下六维, 嫖一点浮云☁</description>
    </item>
    
    <item>
      <title>flask踩坑和排坑记录</title>
      <link>https://cgcel.github.io/posts/2018/06/21/2018-06-21-flask%E8%B8%A9%E5%9D%91%E5%92%8C%E6%8E%92%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/06/21/2018-06-21-flask%E8%B8%A9%E5%9D%91%E5%92%8C%E6%8E%92%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>开篇 最近学习 Django 开发网页, 后来由于 Django 开发比较繁琐以及可迁移性较差, 于是转学 flask, 从而有了这一篇文章, 顺便测试一下我的博客发文功能:P
项目依赖 虽然 flask 较 Django 更轻量, 版本间语法差别不大, 但还是会有一些小坑. 比如在使用 flask-sqlalchemy 时报错, 原因是版本过新或过旧, 另外 flask 的扩展包需要另外安装, 这里注意一下就行. 下面列出个人博客项目的安装依赖 ( python3.5 &amp;amp; python3.6 测试通过):
1 2 3 4  Flask_SQLAlchemy==2.1 Flask==1.0.2 Markdown==2.6.11 Flask_Bootstrap==3.3.7.1   数据库 数据库的使用是网页编写的一个非常重要的部分, 基本上读取, 存入, 登录, 注销等等操作都和数据库相关, 本项目使用 sqlite3, 操作起来较为简单. 简单总结一下 flask-sqlalchemy 的使用技巧:
 路径:  1 2 3 4  MySQL: mysql+pymysql://username:password@hostname/database Postgres: postgresql://username:password@hostname/database SQLite(Unix): sqlite:////absolute/path/to/database SQLite(Windows): sqlite:///c:/absolute/path/to/database    初始化:  1 2 3 4  app = Flask(__name__)&amp;lt;br&amp;gt; app.</description>
    </item>
    
  </channel>
</rss>
