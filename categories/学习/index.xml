<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>学习 on 烂杯的博客</title>
    <link>https://cgcel.github.io/categories/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on 烂杯的博客</description>
    <image>
      <url>https://cgcel.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://cgcel.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 15 May 2021 09:11:56 +0800</lastBuildDate><atom:link href="https://cgcel.github.io/categories/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Inline Bot 并通过 EFB 发送微信小黄脸</title>
      <link>https://cgcel.github.io/posts/2021/05/15/</link>
      <pubDate>Sat, 15 May 2021 09:11:56 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2021/05/15/</guid>
      <description>写了一个小bot解决efb无法发送小黄脸的问题</description>
    </item>
    
    <item>
      <title>我的 ZeroTier Network 管理 bot</title>
      <link>https://cgcel.github.io/posts/2021/05/13/</link>
      <pubDate>Thu, 13 May 2021 21:51:24 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2021/05/13/</guid>
      <description>一个用于管理 ZeroTier 网络的 Telegram Bot</description>
    </item>
    
    <item>
      <title>爬取洪灾期间长江沿岸水位并绘图</title>
      <link>https://cgcel.github.io/posts/2020/07/18/</link>
      <pubDate>Sat, 18 Jul 2020 15:28:01 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/07/18/</guid>
      <description>偶然发起的小项目</description>
    </item>
    
    <item>
      <title>最近开的一个爬虫小坑</title>
      <link>https://cgcel.github.io/posts/2020/07/06/</link>
      <pubDate>Mon, 06 Jul 2020 21:43:54 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/07/06/</guid>
      <description>第一次全程使用selenium爬数据</description>
    </item>
    
    <item>
      <title>STM32的串口学习总结</title>
      <link>https://cgcel.github.io/posts/2020/06/03/</link>
      <pubDate>Wed, 03 Jun 2020 16:47:33 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/06/03/</guid>
      <description>初学STM32的串口输出</description>
    </item>
    
    <item>
      <title>我的第一个Arduino库</title>
      <link>https://cgcel.github.io/posts/2020/04/26/</link>
      <pubDate>Sun, 26 Apr 2020 19:37:43 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/04/26/</guid>
      <description>基于Arduino的, 简单的, 读取RFID数据的库</description>
    </item>
    
    <item>
      <title>树莓派使用FRP实现内网穿透记录</title>
      <link>https://cgcel.github.io/posts/2020/03/11/</link>
      <pubDate>Wed, 11 Mar 2020 21:00:15 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/03/11/</guid>
      <description>使用frp进行内网穿透</description>
    </item>
    
    <item>
      <title>ViewPager的嵌套滑动冲突问题解决</title>
      <link>https://cgcel.github.io/posts/2020/02/10/</link>
      <pubDate>Mon, 10 Feb 2020 16:01:35 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/02/10/</guid>
      <description>在上一篇博客 ViewPager禁用滑动实践和总结 中我总结了禁用 ViewPager 滑动的解决方案, 这也是网上示例的主流解决方法, 但是使用这个方法后, 导致项目中 Fragment 的 RecyclerView 与 ViewPager 的滑动出现冲突, 无法实现效果, 如下图:
从上图可以看到按照上一篇博客中重写子 Fragment 中的 ViewPager 的 OnInterceptTouchEvent() 和 onTouchEvent() 后, 于子 Fragment 中显示的 RecyclerView 上滑动将无法使用 Activity 的 ViewPager 切换, 只能在 RecyclerView 没有覆盖到的边框位置进行滑动, 这样的操作无疑非常不舒适, 于是我只能继续在网上搜索相关解决方案, 现总结如下.
修改步骤 与上一篇博客思路一样, 只需要重写 ViewPager 的 canScrollHorizontally() 函数即可, 代码如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  public class UnScrollableViewPager extends ViewPager { private boolean scrollable = false; public UnScrollableViewPager(Context context) { super(context); } public UnScrollableViewPager(Context context, AttributeSet attrs) { super(context, attrs); } @Override // 重写该函数, 用于判断是否能水平滑动  public boolean canScrollHorizontally(int direction) { return scrollable; // false表示已经到最右  } }   修改完代码后重新运行, 效果如下, 可见已经实现了预期的效果.</description>
    </item>
    
    <item>
      <title>ViewPager禁用滑动实践和总结</title>
      <link>https://cgcel.github.io/posts/2020/02/08/</link>
      <pubDate>Sat, 08 Feb 2020 22:00:39 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/02/08/</guid>
      <description>开篇 接触 Android 有一段时间了, 起因是帮同事一起做项目, 顺便自己学习, 于是项目一直断断续续进行, 很多控件和功能都是参考《第一行代码》还有网上的例子慢慢探索的, 最近一直在钻 TabLayout 的点击切换, 也就是禁用 ViewPager 的左右滑动切换的牛角尖, 具体效果如下图所示. 网上的例子实在是太千篇一律了, 导致有些地方只要其中一篇阅读量很多的博客没有, 其他转载或者借鉴的博客就都不会写🤪, 下面就记录一下我在原有 TabLayout&amp;amp;ViewPager 基础上修改的示例.
实现步骤 1. 重写ViewPager 如果要实现禁用滑动的效果, 那么就需要重写 ViewPager, 因为默认是开启滑动的, 具体代码如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  public class NoScrollingViewPager extends ViewPager { private boolean scrollable = false; public NoScrollingViewPager(Context context) { super(context); } public NoScrollingViewPager(Context context, AttributeSet attrs) { super(context, attrs); } @Override // 重写以下两个TouchEvent, 返回false以禁用滑动动作的监听  public boolean onInterceptTouchEvent(MotionEvent ev) { return scrollable; } @Override public boolean onTouchEvent(MotionEvent ev) { return scrollable; } }   以上重写代码都是千篇一律的, 只需要重写两个函数.</description>
    </item>
    
    <item>
      <title>V2RayN局域网共享</title>
      <link>https://cgcel.github.io/posts/2020/02/06/</link>
      <pubDate>Thu, 06 Feb 2020 14:28:09 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2020/02/06/</guid>
      <description>开篇 最近肺炎爆发, 虽然上班了但是因为公司要节省口罩, 所以大部分时间都在家里待岗, 正好电脑上已经不再用 ss, ssr 也准备不用了 (越来越不稳定了) 于是尝试了一下共享 V2Ray 的局域网连接, 很快就成功了, 闲得无事写篇博客记录一下.
准备  电脑1台 安装好 V2RayN  详细步骤 设置V2RayN 因为现在懒得自己弄, 所以随便找个机场, 拿到订阅链接后在 V2RayN 中更新节点并在设置中允许局域网连接, 同时留意一下本地监听端口, 如图显示是 10808 端口.
打开移动热点 以 win10 系统为例, 在设置中打开移动热点:
然后在网络适配器选项中, 查看已经开启的热点并获取ip地址:
连接热点 首先在设置中查看已开启的代理的手动设置项, 可以看到端口为 10809.
在手机上连接热点, 并手动设置代理服务器 IP 以及端口, 从上面步骤可知分别为: 192.168.137.1 和 10809.
到这里就大功告成了, 其他类似的共享到局域网的热点都是差不多的步骤, ssr 的设置也一样.</description>
    </item>
    
    <item>
      <title>Arduino的主从机双向通信</title>
      <link>https://cgcel.github.io/posts/2019/12/03/</link>
      <pubDate>Tue, 03 Dec 2019 01:19:09 +0800</pubDate>
      
      <guid>https://cgcel.github.io/posts/2019/12/03/</guid>
      <description>多个Arduino的串口通信实例</description>
    </item>
    
    <item>
      <title>基于Arduino的自平衡车的调试总结</title>
      <link>https://cgcel.github.io/posts/2018/12/21/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/12/21/</guid>
      <description>课设作业完结记录</description>
    </item>
    
    <item>
      <title>Shadowsocks局域网共享</title>
      <link>https://cgcel.github.io/posts/2018/09/05/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/09/05/</guid>
      <description>开篇 好久没有更新博客, 正好熟悉了一下 ss 通过局域网共享到手机, 于是写一篇博客记录下来.
详细步骤 打开热点 首先我们打开电脑的热点, 如果没有的话就使用 wifi 共享工具打开热点, 这里使用的是 WiFi 共享精灵(顺便吐槽一下, 我一直没有找到没广告的良心工具, 换来换去还是这个最顺手, 把各种弹窗关掉将就一下吧)
查看网络连接信息 打开网络连接, 我们可以通过名称来找到刚开启的热点, 如图为本地连接3.
获取本机IP地址 这是非常重要的一步, 打开 cmd 或其他工具, 输入ipconfig, 第一个本地连接的 ipv4 地址就是了.
Shadowsocks设置 打开 ss 客户端, 右键其图标, 勾选允许其他设备连入.
手机WiFi手动配置 进入 WiFi 设置, 连接时选择高级选项, 据观察, 如果已经连接过此热点, Android 9.0 可以直接设置, 而 8.1 需要 forget 后重新设置. 如图, proxy 选手动, 然后将本机 IP 地填写进去, 端口亲测 1080 可行, 网上说的 8123 不行 (更正: 需要以 ss 的 proxy 代理端口为准). 其他选项默认即可, 保存后即可科学上网啦.</description>
    </item>
    
    <item>
      <title>树莓派系统安装以及ssh连接</title>
      <link>https://cgcel.github.io/posts/2018/07/17/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/07/17/</guid>
      <description>前期准备 在我接触单片机的时候就已经知道树莓派的厉害, 这是一台低功率计算机, 同时还可以当作一台高性能的单片机使用. 3月的时候入了一台树莓派3b, 一直积灰到现在, 终于在考试, 课设全部结束之后有空玩一玩了.
系统安装 系统下载 系统安装还不算太麻烦, 直接去 官网 下载镜像即可, 第一次装系统的话还是选官方提供的东西吧, 我们选择下载 Raspbian 系统, 这是专门为树莓派提供的 Debian 系统, 有两个版本可供选择:
 Raspbian Stretch with desktop Raspbian Stretch Lite  前者是带图形界面的版本, 后者是只有命令行页面的轻量级版本, 为了轻便, 我选择了Lite版.
刷入 Raspbian 下载完毕后, 使用 SDFormatter 将 SD 卡格式化, 然后使用 Win32DiskImager 将系统写进 SD 卡, 类似工具有很多, 自己选用一个即可 (官网更新了官方工具 Raspberry Pi Imager, 使用起来更为方便), SD 卡容量方面, 很多教程都是选择了最低限度的 2GB 的 SD 卡, 然而这都已经是古董级别的卡了, 一般在街上只能买到最低 16GB 的. 使用 Win32DiskImager 写入系统成功后, 会弹窗询问是否格式化 SD 卡, 这时候点取消就行, 不然又要重新写一遍.</description>
    </item>
    
    <item>
      <title>Gcm-for-Mojo搭建总结</title>
      <link>https://cgcel.github.io/posts/2018/07/06/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/07/06/</guid>
      <description>使用Gcm-for-Mojo接收微信消息</description>
    </item>
    
    <item>
      <title>六维空间自动登录脚本</title>
      <link>https://cgcel.github.io/posts/2018/06/23/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/06/23/</guid>
      <description>每天登录一下六维, 嫖一点浮云☁</description>
    </item>
    
    <item>
      <title>使用hugo创建博客</title>
      <link>https://cgcel.github.io/posts/2018/06/22/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/06/22/</guid>
      <description>起因 Jekyll 的加载速度实在是有点慢, 在刚上线不久后, 我又得知了一个页面加载更快的方法: 使用 Hugo 搭建博客.
搭建环境 到 下载页面 下载 Windows 版本的 hugo, 遇到了坑, 最新版本无法在本地预览页面(v0.42.1)于是我下载了和教程一样的老版本, 以确保能够顺利调试.
配置 因为才折腾过 jekyll, 加上 hugo 比前者的配置要简单, 所以我很快就改好了 config 文件, 这里要注意的一点是, 要先下载好主题再在根目录使用 hugo server -D 指令, 否则页面会一片空白.
基础知识学习(Go templates) 列一下适合初学者学习的链接:
 YouTube 官方文档 函数以及变量  模板选择 不得不说模板的选择真是一道难题, 就算是在 hugo 官方提供的模板页面中下载的模板也还是要会有一些 bug&amp;hellip;因为想要 Tags 功能,自己照葫芦画瓢写也有点丑, 所以在上一个模板刚配置完的时候我又换了一个模板, 这个模板刚好有 bug ( baseurl 和 css 等链接之间少了&#39;/&#39;) 本菜鸟找了快一个小时才找出来&amp;hellip;
编写博客 只需要在根目录命令行输入 hugo new ***/***.md 就可以自动创建新文章, 并且hugo会帮忙自动生成标题等信息.
1 2 3 4 5 6  +++ title= &amp;#34;使用hugo创建博客&amp;#34; date= 2018-06-22T19:34:37+08:00 categories=[&amp;#39;tech&amp;#39;] tags= [&amp;#39;hugo&amp;#39;,&amp;#39;go&amp;#39;,&amp;#39;github.</description>
    </item>
    
    <item>
      <title>flask踩坑和排坑记录</title>
      <link>https://cgcel.github.io/posts/2018/06/21/flask%E8%B8%A9%E5%9D%91%E5%92%8C%E6%8E%92%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/06/21/flask%E8%B8%A9%E5%9D%91%E5%92%8C%E6%8E%92%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>开篇 最近学习 Django 开发网页, 后来由于 Django 开发比较繁琐以及可迁移性较差, 于是转学 flask, 从而有了这一篇文章, 顺便测试一下我的博客发文功能:P
项目依赖 虽然 flask 较 Django 更轻量, 版本间语法差别不大, 但还是会有一些小坑. 比如在使用 flask-sqlalchemy 时报错, 原因是版本过新或过旧, 另外 flask 的扩展包需要另外安装, 这里注意一下就行. 下面列出个人博客项目的安装依赖 ( python3.5 &amp;amp; python3.6 测试通过):
 Flask_SQLAlchemy==2.1Flask==1.0.2Markdown==2.6.11Flask_Bootstrap==3.3.7.1 数据库 数据库的使用是网页编写的一个非常重要的部分, 基本上读取, 存入, 登录, 注销等等操作都和数据库相关, 本项目使用 sqlite3, 操作起来较为简单. 简单总结一下 flask-sqlalchemy 的使用技巧:
 路径:   MySQL: mysql+pymysql://username:password@hostname/database Postgres: postgresql://username:password@hostname/database SQLite(Unix): sqlite:////absolute/path/to/database SQLite(Windows): sqlite:///c:/absolute/path/to/database
  初始化:  1 2 3 4  app = Flask(__name__)&amp;lt;br&amp;gt; app.</description>
    </item>
    
    <item>
      <title>github.io博客搭建</title>
      <link>https://cgcel.github.io/posts/2018/06/21/github.io%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cgcel.github.io/posts/2018/06/21/github.io%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>开篇 看到过不少用 github page 搭建的个人博客, 感觉非常方便. 加上前不久刚学了 flask, 对搭建个人博客挺感兴趣, 于是在网上找了一些教程, 开始创建博客, 这里做一下简单的总结.
创建仓库 在 github 新建项目, 命名格式为 &amp;lt;username&amp;gt;.github.io, 最好先选 private, 因为可能会有很多误操作. 然后在本机 (Windows) 安装环境: gem, jekyll 等等, 安装这些是便于在本地修改网页并且预览,这样就不用每次都 push 到 github 来试了. 不过 Windows 安装起来挺麻烦的, 一定要按照教程一步一步来设置, 跟教程有一些出入的地方要自己判断.
选择主题 jekyll 的主题有很多,我们可以在 github 和网页上挑选, 本来我想要选一个 md 格式的主题,奈何一时间找不到,于是从 github 上选择了一个纯白的极简主题.
自定义页面内容 选好主题之后, 通过 git 把代码 clone 到本地, 首先必须要编辑的是 _config.yml,按照个人的信息和需求进行增减改动, 如果不知道该怎么改, 建议多找几个主题对比一下文件内容, 也可以到 YouTube 找一下相关视频教程. 设置完后, 就可以去自定义个人信息和网页显示内容了.
预览和推送测试 修改完文件后,在项目根目录打开 cmd, 输入 jekyll s, 如果没有报错就表示在本地运行成功了, 此时可以打开浏览器, 进入 127.</description>
    </item>
    
  </channel>
</rss>
